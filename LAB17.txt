

1) Suppose you have a dataset containing daily temperature readings for a city, and you want to identify days with extreme temperature conditions. Find days where the temperature either      
   exceeded 35 degrees Celsius (hot day) or dropped below 5 degrees Celsius (cold day).

   Input:

   temperatures = np.array([32.5, 34.2, 36.8, 29.3, 31.0, 38.7, 23.1, 18.5, 22.8, 37.2])


import numpy as np

# Given dataset: an array of daily temperature readings
temperatures = np.array([32.5, 34.2, 36.8, 29.3, 31.0, 38.7, 23.1, 18.5, 22.8, 37.2])

# Define the temperature thresholds for extreme conditions
hot_threshold = 35.0  # temperature in degrees Celsius considered as hot
cold_threshold = 5.0  # temperature in degrees Celsius considered as cold

# Find indices of days with temperatures exceeding the hot threshold
hot_days = np.where(temperatures > hot_threshold)[0]
# np.where(condition) returns the indices of elements in the array that satisfy the condition
# temperatures > hot_threshold gives a boolean array where True indicates the condition is met
# [0] is used to get the first element of the tuple returned by np.where, which is the indices array

# Find indices of days with temperatures dropping below the cold threshold
cold_days = np.where(temperatures < cold_threshold)[0]
# Similar to the previous np.where, but with a different condition

# Combine hot and cold days to get all days with extreme temperature conditions
extreme_days = np.sort(np.concatenate((hot_days, cold_days)))
# np.concatenate((array1, array2)) combines the two arrays into one
# np.sort(array) sorts the combined array in ascending order

# Print the results
print("Hot days (temperature > 35°C):", hot_days)
print("Cold days (temperature < 5°C):", cold_days)
print("All extreme temperature days:", extreme_days)


Output:

Hot days (temperature > 35°C): [2 5 9]
Cold days (temperature < 5°C): []
All extreme temperature days: [2 5 9]

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Suppose you have a dataset containing monthly sales data for a company, and you want to split this data into quarterly reports for analysis and reporting purposes.

   Input:

   monthly_sales = np.array([120, 135, 148, 165, 180, 155, 168, 190, 205, 198, 210, 225])


import numpy as np

# Given dataset: an array of monthly sales data
monthly_sales = np.array([120, 135, 148, 165, 180, 155, 168, 190, 205, 198, 210, 225])

# Reshape the monthly sales data into a 2D array with 4 rows and 3 columns
# Each row will represent a quarter, and each column will represent a month within that quarter
quarterly_sales = monthly_sales.reshape((4, 3))
# np.reshape((rows, columns)) changes the shape of the array to the specified dimensions

# Print the results
print("Monthly Sales Data:")
print(monthly_sales)
print("\nQuarterly Sales Data:")
print(quarterly_sales)


Output:

Monthly Sales Data:
[120 135 148 165 180 155 168 190 205 198 210 225]

Quarterly Sales Data:
[[120 135 148]
 [165 180 155]
 [168 190 205]
 [198 210 225]]

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3)  Suppose you have a dataset containing customer data, and you want to split this data into two groups: one group for customers who made a purchase in the last 30 days and another group           
    for customers who haven't made a purchase in the last 30 days.

    Input: customer_ids = np.array([101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) last_purchase_days_ago = np.array([5, 15, 20, 25, 30, 35, 40, 45, 50, 55])


import numpy as np

# Given dataset: arrays of customer IDs and the number of days since their last purchase
customer_ids = np.array([101, 102, 103, 104, 105, 106, 107, 108, 109, 110])
last_purchase_days_ago = np.array([5, 15, 20, 25, 30, 35, 40, 45, 50, 55])

# Define the threshold for recent purchases
threshold_days = 30

# Find indices of customers who made a purchase in the last 30 days
recent_customers_indices = np.where(last_purchase_days_ago <= threshold_days)[0]
# np.where(condition) returns the indices of elements in the array that satisfy the condition
# last_purchase_days_ago <= threshold_days gives a boolean array where True indicates the condition is met
# [0] is used to get the first element of the tuple returned by np.where, which is the indices array

# Find indices of customers who haven't made a purchase in the last 30 days
non_recent_customers_indices = np.where(last_purchase_days_ago > threshold_days)[0]
# Similar to the previous np.where, but with a different condition

# Use the indices to get the corresponding customer IDs for each group
recent_customers = customer_ids[recent_customers_indices]
non_recent_customers = customer_ids[non_recent_customers_indices]

# Print the results
print("Customers who made a purchase in the last 30 days:")
print(recent_customers)
print("\nCustomers who haven't made a purchase in the last 30 days:")
print(non_recent_customers)


Output:

Customers who made a purchase in the last 30 days:
[101 102 103 104 105]

Customers who haven't made a purchase in the last 30 days:
[106 107 108 109 110]

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) Suppose you have two sets of employee data-one containing information about full-time employees and another containing information about part-time employees. You want to combine this 
   data to create a comprehensive employee dataset for HR analysis.

   Input:

   # Employee data for full-time employees

   full_time_employees = np.array([[101, 'John Doe', 'Full-Time', 55000],[102, 'Jane Smith', 'Full-Time', 60000],[103, 'Mike Johnson', 'Full-Time', 52000]])

   # Employee data for part-time employees

   part_time_employees = np.array([[201, 'Alice Brown', 'Part-Time', 25000],[202, 'Bob Wilson', 'Part-Time', 28000],[203, 'Emily Davis', 'Part-Time', 22000]])



import numpy as np

# Employee data for full-time employees
full_time_employees = np.array([
    [101, 'John Doe', 'Full-Time', 55000],
    [102, 'Jane Smith', 'Full-Time', 60000],
    [103, 'Mike Johnson', 'Full-Time', 52000]
], dtype=object)  # Specify dtype=object to handle mixed data types (integers and strings)

# Employee data for part-time employees
part_time_employees = np.array([
    [201, 'Alice Brown', 'Part-Time', 25000],
    [202, 'Bob Wilson', 'Part-Time', 28000],
    [203, 'Emily Davis', 'Part-Time', 22000]], dtype=object)  # Specify dtype=object to handle mixed data types (integers and strings)

# Combine full-time and part-time employee data into a comprehensive dataset
all_employees = np.concatenate((full_time_employees, part_time_employees), axis=0)
# np.concatenate((array1, array2), axis=0) combines the arrays along the specified axis
# axis=0 means concatenating along rows (i.e., adding more rows)

# Print the results
print("Full-Time Employees:")
print(full_time_employees)
print("\nPart-Time Employees:")
print(part_time_employees)
print("\nAll Employees:")
print(all_employees)


Output:

Full-Time Employees:
[[101 'John Doe' 'Full-Time' 55000]
 [102 'Jane Smith' 'Full-Time' 60000]
 [103 'Mike Johnson' 'Full-Time' 52000]]

Part-Time Employees:
[[201 'Alice Brown' 'Part-Time' 25000]
 [202 'Bob Wilson' 'Part-Time' 28000]
 [203 'Emily Davis' 'Part-Time' 22000]]

All Employees:
[[101 'John Doe' 'Full-Time' 55000]
 [102 'Jane Smith' 'Full-Time' 60000]
 [103 'Mike Johnson' 'Full-Time' 52000]
 [201 'Alice Brown' 'Part-Time' 25000]
 [202 'Bob Wilson' 'Part-Time' 28000]
 [203 'Emily Davis' 'Part-Time' 22000]]


