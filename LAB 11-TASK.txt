1) Write a Python program to sum all the items in a list. 

def sum_list(lst):                                                                       # Define a function named sum_list 
    total = 0                                                                            # Initialize a variable sum to store the sum of elements, starting with 0
    for num in lst:                                                                      # Iterate over each element in the list
        total += num                                                                     # Add the current element to the total sum
    return total                                                                         # Return the total sum after iterating through all elements in the list

sample_list = [1, 2, 3, 4, 5]                                                            # Test the function with a sample list
print("Sum of the list:", sum_list(sample_list))                                         # Call the sum_list function with the sample list and print the result


Output:

Sum of the list: 15

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Write a Python program to get the largest and smallest number from a list without builtin functions.


def find_max_min(lst):                                                 # Define a function named find_max_min to find the largest and smallest numbers
    largest = None                                                     # Initialize variables to store the largest and smallest numbers
    smallest = None
   
    for num in lst:                                                    # Iterate over each element in the list
        if largest is None or num > largest:                           # If largest is None or the current element is greater than the largest
            largest = num                                              # Update the largest number
        if smallest is None or num < smallest:                         # If smallest is None or the current element is smaller than the smallest
            smallest = num                                             # Update the smallest number
   
    return largest, smallest                                           # Return the largest and smallest numbers as a tuple


sample_list = [3, 1, 7, 4, 2, 8, 5]                                    # Test the function with a sample list
largest, smallest = find_max_min(sample_list)                          # Call the find_max_min function with the sample list and print the result
print("Largest number:", largest)
print("Smallest number:", smallest)

Output:

Largest number: 8
Smallest number: 1

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3)  Write a Python program to find duplicate values from a list and display those. 


def find_duplicates(lst):                                      # Define a function named find_duplicates to find and display duplicate values
    duplicates = []                                            # Initialize an empty list to store duplicate values
    
    for i in range(len(lst)):                                  # Iterate over each element in the list
        for j in range(i+1, len(lst)):                         # Iterate over the remaining elements in the list
            if lst[i] == lst[j]:                               # If the current element is equal to any other element in the list
                if lst[i] not in duplicates:                   # Check if it's already in the duplicates list
                    duplicates.append(lst[i])                  # Add the duplicate value to the duplicates list
    return duplicates                                          # Return the list of duplicate values

sample_list = [1, 2, 3, 4, 2, 5, 6, 4, 7, 8, 1]                # Test the function with a sample list
print("Duplicate values:", find_duplicates(sample_list))       # Call the find_duplicates function with the sample list and print the result


Output:

Duplicate values: [1, 2, 4]

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) Write a Python program to split a given list into two parts where the length of the first part of the list is given. 

Original list: [1, 1, 2, 3, 4, 4, 5, 1] 

Length of the first part of the list: 3 

Splitted the said list into two parts: 

([1, 1, 2], [3, 4, 4, 5, 1]) 



def split_list(lst, length_first_part):                                      # Define a function named split_list to split the list into two parts
    first_part = lst[:length_first_part]                                     # Extract the first part of the list using slicing
    second_part = lst[length_first_part:]                                    # Extract the second part of the list using slicing
    
    return first_part, second_part                                           # Return a tuple containing the two parts of the list

original_list = [1, 1, 2, 3, 4, 4, 5, 1]                                     # Test the function with a sample list and specified length of the first part
length_first_part = 3
split_parts = split_list(original_list, length_first_part)                   # Call the split_list function with the sample list and specified length
print("Splitted the said list into two parts:")                              # Print the split parts of the list
print(split_parts)


Output:

Splitted the said list into two parts:
([1, 1, 2], [3, 4, 4, 5, 1])

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5) Write a Python program to traverse a given list in reverse order, and print the elements with the original index. Original list: ['red', 'green', 'white', 'black'] Traverse the said list in reverse order:

black 

white 

green 

red


def reverse_traverse_list(lst):                                         # Define a function named reverse_traverse_list to traverse the list in reverse order
    length = len(lst)                                                   # Get the length of the list
    for i in reversed(range(length)):                                   # Iterate over the list in reverse order using a reversed range
        print(lst[i], "at index", i)                                    # Print the element at the current index along with its original index

original_list = ['red', 'green', 'white', 'black']                      # Test the function with a sample list
print("Traverse the said list in reverse order:")                       # Call the reverse_traverse_list function with the sample list
reverse_traverse_list(original_list)
  

Output:

Traverse the said list in reverse order:
black at index 3
white at index 2
green at index 1
red at index 0
